<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Welcome Kimberly</title>
  <style>
    /* Reset and base styling */
    *, *::before, *::after {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    body {
      font-family: sans-serif;
      background-color: black;
      color: #ccff00;
      margin: 2em;
      font-size: 1.6em;
      text-align: center;
    }
    h1 {
      font-size: 3.2em;
      margin-bottom: 1em;
      font-weight: bold;
    }
    .container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 1em;
      margin-bottom: 1.5em;
    }
    /* All buttons and labels with padding increased 30% from original */
    button,
    #originalForm label {
      background-color: black;
      color: #ccff00;
      border: 0.125rem solid #ccff00;
      padding: 1.3rem 2.7rem;
      font-size: 2em;
      border-radius: 10px;
      font-weight: bold;
      cursor: pointer;
      transition: background-color 0.3s, color 0.3s;
    }
    button:hover,
    #originalForm label:hover {
      background-color: #ccff00;
      color: black;
    }
    /* Extra vertical padding for "Upload Image" label */
    #originalForm label[for="imageInput"] {
      padding-top: 1em;
      padding-bottom: 1em;
    }
    #backButton {
      display: none;
      background-color: black;
      color: #ccff00;
      border: 0.125rem solid #ccff00;
      padding: 1.3rem 2.7rem;
      font-size: 2em;
      border-radius: 10px;
      font-weight: bold;
      cursor: pointer;
      transition: background-color 0.3s, color 0.3s;
      margin: 1.5em auto 0 auto;
    }
    #backButton:hover {
      background-color: #ccff00;
      color: black;
    }
    #originalForm {
      display: none;
      width: 100%;
      max-width: 720px;
      margin: 0 auto 2em auto;
      text-align: center;
    }
    #originalForm main {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .upload-section {
      margin-bottom: 1em;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1em;
    }
    /* Responsive adjustments */
    @media (max-width: 700px) {
      body {
        margin: 1em;
        font-size: 1.6em;
      }
      h1 {
        font-size: 2.5em;
        margin-bottom: 0.8em;
      }
      .container {
        flex-direction: column;
        margin-bottom: 1em;
      }
      #backButton {
        margin-top: 1em;
      }
      #originalForm {
        max-width: 100%;
      }
      button,
      #originalForm label {
        width: 100%;
        margin-bottom: 0.8em;
      }
    }
    #imageInput {
      display: none;
    }
    /* Camera stream container with fixed height */
    .camera-stream {
      position: relative;
      width: 100%;
      max-width: 720px;
      height: 400px;
      margin: 1em auto;
      overflow: hidden;
      border: 0.125rem solid #ccff00;
      transition: all 0.3s ease;
    }
    /* Video and preview share the same container space */
    #video, #preview {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: none;
      transition: all 0.3s ease;
    }
    #canvas {
      display: none;
    }
    /* Controls container remains fixed below the camera stream */
    .controls {
      display: flex;
      gap: 1em;
      flex-wrap: wrap;
      justify-content: center;
      transition: all 0.3s ease;
      margin-top: 0.5em;
    }
    .prompt-box {
      width: 100%;
      max-width: 560px;
      margin: 1em auto;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .prompt-box input[type="text"] {
      width: 100%;
      padding: 0.5rem 1rem;
      font-size: 2em;
      margin-bottom: 1em;
      border: 0.125rem solid #ccff00;
      color: black;
      transition: all 0.3s ease;
    }
    .prompt-buttons {
      display: flex;
      gap: 1em;
      flex-wrap: wrap;
      justify-content: center;
      transition: all 0.3s ease;
    }
    .output {
      margin-top: 1em;
      font-size: 2em;
      white-space: pre-wrap;
      color: #ccff00;
    }
    /* Battery Percentage Display styling */
    #batteryDisplay {
      font-size: 72px;
      margin: 1em 0;
      color: #ccff00;
    }
  </style>
</head>
<body>
  <h1 id="welcomeHeading">Welcome Kimberly</h1>
  <div class="container">
    <button id="automatedButton">Automated</button>
    <button id="promptingButton">Prompting</button>
  </div>
  <!-- Battery percentage display below the buttons -->
  <div id="batteryDisplay">--%</div>
  
  <div id="originalForm">
    <main>
      <form>
        <div class="upload-section">
          <input type="file" id="imageInput" accept="image/*" />
          <label for="imageInput">Upload Image</label>
          <!-- Camera stream container -->
          <div class="camera-stream">
            <video id="video" autoplay playsinline></video>
            <img id="preview" src="#" alt="Image preview" />
            <canvas id="canvas" width="300" height="200"></canvas>
          </div>
          <!-- Controls container -->
          <div class="controls">
            <button id="startVideoButton" type="button">Start Video</button>
            <button id="captureFrameButton" type="button" style="display:none;">Capture</button>
            <button id="shiftCamButton" type="button" style="display:none;">Shift Cam</button>
          </div>
        </div>
        <div class="prompt-box">
          <input id="promptInput" name="prompt" type="text" />
          <div class="prompt-buttons">
            <button type="submit">Go</button>
            <button type="button" id="replayButton">Replay</button>
          </div>
        </div>
      </form>
      <p class="output">(Results will appear here)</p>
    </main>
  </div>
  <button id="backButton">Go Back</button>
  
  <script src="https://unpkg.com/markdown-it@8.4.2/dist/markdown-it.min.js"></script>
  <script src="https://unpkg.com/base64-js@1.3.0/base64js.min.js"></script>
  <script type="module">
    // AudioContext-based TTS for iOS compatibility
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    async function resumeAudioContext() {
      if (audioContext.state === 'suspended') {
        await audioContext.resume();
      }
    }
    
    async function playTTS(text) {
      try {
        await resumeAudioContext();
        const response = await fetch('/api/tts', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ text })
        });
        const data = await response.json();
        if (data.error) {
          console.error("TTS error:", data.error);
          return;
        }
        const audioResponse = await fetch(data.url);
        const arrayBuffer = await audioResponse.arrayBuffer();
        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
        const source = audioContext.createBufferSource();
        source.buffer = audioBuffer;
        source.connect(audioContext.destination);
        source.onended = () => {
          if (isRunning) {
            captureAndProcess();
          }
        };
        source.start(0);
      } catch (error) {
        console.error("Error in playTTS:", error);
      }
    }
    
    async function* streamResponseChunks(response) {
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      while (true) {
        const { value, done } = await reader.read();
        if (done) break;
        yield decoder.decode(value, { stream: true });
      }
    }
    
    async function* streamGemini(options) {
      const response = await fetch("/api/generate", options);
      yield* streamResponseChunks(response);
    }
    
    const welcomeHeading = document.getElementById('welcomeHeading');
    const automatedButton = document.getElementById('automatedButton');
    const promptingButton = document.getElementById('promptingButton');
    const originalForm = document.getElementById('originalForm');
    const backButton = document.getElementById('backButton');
    
    const form = originalForm.querySelector('form');
    const promptInput = document.getElementById('promptInput');
    const output = document.querySelector('.output');
    const imageInput = document.getElementById('imageInput');
    
    const startVideoButton = document.getElementById('startVideoButton');
    const captureFrameButton = document.getElementById('captureFrameButton');
    const shiftCamButton = document.getElementById('shiftCamButton');
    
    const videoEl = document.getElementById('video');
    const preview = document.getElementById('preview');
    const canvas = document.getElementById('canvas');
    
    const replayButton = document.getElementById('replayButton');
    
    let videoStream = null;
    let capturedImage = null;
    let currentFacingMode = "environment";  // Default to rear camera
    
    automatedButton.addEventListener('click', () => {
      window.location.href = '/automated';
    });
    
    promptingButton.addEventListener('click', () => {
      welcomeHeading.style.display = 'none';
      automatedButton.style.display = 'none';
      promptingButton.style.display = 'none';
      originalForm.style.display = 'block';
      backButton.style.display = 'block';
    });
    
    backButton.addEventListener('click', () => {
      welcomeHeading.style.display = 'block';
      automatedButton.style.display = 'inline-block';
      promptingButton.style.display = 'inline-block';
      originalForm.style.display = 'none';
      backButton.style.display = 'none';
      stopVideoStream();
    });
    
    async function startVideo() {
      try {
        videoStream = await navigator.mediaDevices.getUserMedia({
          video: { facingMode: { ideal: currentFacingMode } }
        });
        videoEl.srcObject = videoStream;
        videoEl.onloadedmetadata = () => videoEl.play();
        videoEl.style.display = "block";
        preview.style.display = "none";
        captureFrameButton.style.display = "inline-block";
        shiftCamButton.style.display = "inline-block";
        startVideoButton.style.display = "none";
      } catch (err) {
        console.error("Error accessing camera:", err);
        output.textContent = "Error accessing camera: " + err.message;
      }
    }
    
    function stopVideoStream() {
      if (videoStream) {
        videoStream.getTracks().forEach(track => track.stop());
        videoStream = null;
      }
      videoEl.style.display = "none";
      preview.style.display = "none";
      captureFrameButton.style.display = "none";
      shiftCamButton.style.display = "none";
      startVideoButton.style.display = "inline-block";
    }
    
    startVideoButton.addEventListener('click', async () => {
      await startVideo();
    });
    
    captureFrameButton.addEventListener('click', () => {
      if (!capturedImage) {
        if (!videoStream) return;
        canvas.width = videoEl.videoWidth;
        canvas.height = videoEl.videoHeight;
        canvas.getContext('2d').drawImage(videoEl, 0, 0, canvas.width, canvas.height);
        capturedImage = canvas.toDataURL('image/jpeg');
        videoEl.style.display = "none";
        preview.src = capturedImage;
        preview.style.display = "block";
        captureFrameButton.textContent = "Cancel";
      } else {
        capturedImage = null;
        preview.style.display = "none";
        videoEl.style.display = "block";
        captureFrameButton.textContent = "Capture";
      }
    });
    
    shiftCamButton.addEventListener('click', async () => {
      currentFacingMode = (currentFacingMode === "environment") ? "user" : "environment";
      stopVideoStream();
      await startVideo();
    });
    
    imageInput.addEventListener('change', () => {
      capturedImage = null;
      preview.style.display = 'none';
      if (imageInput.files[0]) {
        const reader = new FileReader();
        reader.onload = e => {
          preview.src = e.target.result;
          preview.style.display = "block";
        };
        reader.readAsDataURL(imageInput.files[0]);
      }
    });
    
    form.onsubmit = async (ev) => {
      ev.preventDefault();
      output.textContent = 'Generating...';
      try {
        let imageBase64 = null;
        if (capturedImage) {
          imageBase64 = capturedImage.split(',')[1];
        } else if (imageInput.files && imageInput.files[0]) {
          imageBase64 = await new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onloadend = () => resolve(reader.result.split(',')[1]);
            reader.onerror = reject;
            reader.readAsDataURL(imageInput.files[0]);
          });
        }
        if (!imageBase64) {
          throw new Error("Please upload or capture an image.");
        }
        const contents = [
          {
            role: 'user',
            parts: [
              { inline_data: { mime_type: 'image/jpeg', data: imageBase64 } },
              { text: promptInput.value }
            ]
          }
        ];
        const stream = streamGemini({
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            model: 'gemini-2.0-flash',
            contents,
          }),
        });
        const buffer = [];
        const md = new markdownit();
        for await (const chunk of stream) {
          const lines = chunk.split('\n');
          for (const line of lines) {
            if (line.startsWith('data: ')) {
              const jsonStr = line.slice(6).trim();
              if (jsonStr) {
                const parsed = JSON.parse(jsonStr);
                buffer.push(parsed.text);
              }
            }
          }
          output.innerHTML = md.render(buffer.join(''));
        }
        setTimeout(() => {
          playTTS(output.innerText);
        }, 1000);
      } catch (e) {
        output.innerHTML += '<hr>' + e;
      }
    };
    
    replayButton.addEventListener('click', () => {
      playTTS(output.innerText);
    });
    
    // Update battery percentage every 60 seconds (60 sec = 60 seconds)
    const UPDATE_INTERVAL_SEC = 60; // 60 seconds update interval
    function updateBatteryStatus() {
      fetch('/battery-status')
        .then(response => response.json())
        .then(data => {
          document.getElementById('batteryDisplay').innerText = data.percentage + '%';
        })
        .catch(error => console.error('Error fetching battery status:', error));
    }
    setInterval(updateBatteryStatus, UPDATE_INTERVAL_SEC * 1000);
    updateBatteryStatus();
  </script>
</body>
</html>
